package sequence

// GenerateSequence generates a sequence of numbers based on the input number.
// The sequence is generated by recursively dividing the number by 2 and collecting
// the numbers in ascending order. Only integers greater than 1 are included.
// Example: For input 9:
// - 9/2 = 4 (remainder 1)
// - 4/2 = 2 (remainder 0)
// - 2/2 = 1 (stop condition)
// Result: [2, 4, 9]
func GenerateSequence(n int) []int {
    if n <= 0 {
        return []int{}
    }

    result := make([]int, 0, n)
    generateRecursive(n, &result)
    return result
}

// generateRecursive is a helper function that recursively generates the sequence
// by dividing the number by 2 until reaching 1, then building the sequence
// in ascending order during the recursive callbacks
func generateRecursive(n int, result *[]int) {
    // Base case: stop when n is 1 or less
    if n <= 1 {
        return
    }

    // Recursive case: first go down to smallest number
    generateRecursive(n/2, result)
    
    // Then add current number to result while returning
    *result = append(*result, n)
}